return {
  {
    "hrsh7th/nvim-cmp",
      event = "InsertEnter",
      dependencies = {
        "hrsh7th/cmp-nvim-lsp",
        "hrsh7th/cmp-buffer",
        "hrsh7th/cmp-path",
        "hrsh7th/cmp-nvim-lsp-signature-help",
        {
          "L3MON4D3/LuaSnip",
          version = "v2.3",
          build = "make install_jsregexp",
        },
        "saadparwaiz1/cmp_luasnip",
        "hrsh7th/cmp-cmdline",
        "rafamadriz/friendly-snippets",
        "onsails/lspkind.nvim",
        "windwp/nvim-ts-autotag",
        "windwp/nvim-autopairs",
      },
      config = function()
        local cmp = require("cmp")
        local luasnip = require("luasnip")
        local lspkind = require("lspkind")

        -- Faster autopairs setup
        require("nvim-autopairs").setup({
            check_ts = true,
            enable_check_bracket_line = false,
            ignored_next_char = "[%w%.]",
            fast_wrap = {
            map = '<M-e>',
            chars = { '{', '[', '(', '"', "'" },
            pattern = string.gsub([[ [%'%"%)%>%]%)%}%,] ]], '%s+', ''),
            end_key = '$',
            keys = 'qwertyuiopzxcvbnmasdfghjkl',
            check_comma = true,
            highlight = 'Search',
            highlight_grey='Comment'
        },
  })

  local cmp_autopairs = require("nvim-autopairs.completion.cmp")
    cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done({ map_char = { tex = "" } }))

    -- Optimized LuaSnip setup
    luasnip.config.setup({
        region_check_events = "InsertEnter",
        delete_check_events = "InsertLeave",
        enable_autosnippets = false,
        store_selection_keys = "<Tab>",
        })
  luasnip.filetype_extend("javascript", { "jsdoc" })
    require("luasnip.loaders.from_vscode").lazy_load()

    -- Your existing cmp setup with a few optimizations
    cmp.setup({
        performance = {
        debounce = 0,
        throttle = 0,
        fetching_timeout = 80,  -- Slightly reduced
        max_view_entries = 50,  -- Added to limit items shown
        },
        completion = {
        completeopt = "menu,menuone,noinsert,noselect",
        keyword_length = 1,
        },
        preselect = cmp.PreselectMode.None,
        snippet = {
        expand = function(args)
        luasnip.lsp_expand(args.body)
        end,
        },
        window = {
        completion = {
        border = "rounded",
        winhighlight = "Normal:Pmenu,FloatBorder:PmenuBorder,CursorLine:PmenuSel,Search:None",
        scrollbar = false,  -- Added to reduce rendering
        },
        documentation = {
          border = "rounded",
          winhighlight = "Normal:Pmenu,FloatBorder:PmenuBorder,Search:None",
          scrollbar = false,  -- Added to reduce rendering
        },
        },
        -- Your existing mapping is perfect
          mapping = cmp.mapping.preset.insert({
              ["<C-k>"] = cmp.mapping.select_prev_item(),
              ["<C-j>"] = cmp.mapping.select_next_item(),
              ["<C-b>"] = cmp.mapping.scroll_docs(-4),
              ["<C-f>"] = cmp.mapping.scroll_docs(4),
              ["<C-Space>"] = cmp.mapping.complete(),
              ["<C-e>"] = cmp.mapping.abort(),
              ["<CR>"] = cmp.mapping.confirm({ select = false, behavior = cmp.ConfirmBehavior.Replace }),
              ["<Tab>"] = cmp.mapping(function(fallback)
                  if cmp.visible() then
                  cmp.select_next_item()
                  elseif luasnip.expand_or_jumpable() then
                  luasnip.expand_or_jump()
                  else
                  fallback()
                  end
                  end, { "i", "s" }),
              ["<S-Tab>"] = cmp.mapping(function(fallback)
                  if cmp.visible() then
                  cmp.select_prev_item()
                  elseif luasnip.jumpable(-1) then
                  luasnip.jump(-1)
                  else
                  fallback()
                  end
                  end, { "i", "s" }),
          }),
        sources = cmp.config.sources({
            {
            name = "nvim_lsp",
            priority = 1000,
            entry_filter = function(entry)
            return require("cmp.types").lsp.CompletionItemKind[entry:get_kind()] ~= "Text"
            end
            },
            { name = "luasnip", priority = 750 },
            {
            name = "buffer",
            priority = 500,
            max_item_count = 5,
            keyword_length = 3,
            option = {
            get_bufnrs = function()
            local bufs = {}
            for _, win in ipairs(vim.api.nvim_list_wins()) do
            bufs[vim.api.nvim_win_get_buf(win)] = true
            end
            return vim.tbl_keys(bufs)
            end,
            },
            },
            { name = "path", priority = 250, max_item_count = 3 },
        }),
        formatting = {
          format = lspkind.cmp_format({
              mode = "symbol_text",
              maxwidth = 50,
              ellipsis_char = "...",
              before = function(entry, vim_item)
              vim_item.menu = nil -- Remove source info to reduce noise
              return vim_item
              end,
              }),
        },
    })
  end,
},
}
